{"version":3,"file":"827.js?ver=e6bc7bd365d3e55a36a8","mappings":"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","sources":["webpack://spotify-demo/./src/utils/api.ts","webpack://spotify-demo/./src/hooks/useGetPlaylistItems.ts","webpack://spotify-demo/./src/pages/PlaylistDetailPage/components/DesktopPlaylistItem.tsx","webpack://spotify-demo/./src/pages/PlaylistDetailPage/components/EmptyPlaylistWithSearch.tsx","webpack://spotify-demo/./src/pages/PlaylistDetailPage/PlaylistDetailPage.tsx","webpack://spotify-demo/./src/hooks/useGetPlaylist.ts","webpack://spotify-demo/./src/apis/playlistApi.ts"],"sourcesContent":["import axios from 'axios'\nimport { SPOTIFY_BASE_URL } from '../configs/commonConfig'\n\nconst api = axios.create({\n  baseURL: SPOTIFY_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${localStorage.getItem('access_token')}`,\n  },\n})\n\napi.interceptors.request.use((request) => {\n  request.headers.Authorization = `Bearer ${localStorage.getItem('access_token')}`\n  return request\n})\n\nexport default api\n","import { LastPage } from '@mui/icons-material'\nimport { useInfiniteQuery } from '@tanstack/react-query'\nimport { GetPlaylistItemsRequest } from '../models/playlist'\nimport { getPlaylistItems } from '../apis/playlistApi'\n\n// const usePlaylistItems = (params: GetPlaylistItemsRequest) => {\n//   return useInfiniteQuery({\n//     queryKey: ['playlist-items', params],\n//     queryFn: ({ pageParam }) => {\n//       return getPlaylistItems({ offset: pageParam, ...params })\n//     },\n//     initialPageParam: 0,\n//     getNextPageParam: (lastPage) => {\n//       if (lastPage.next) {\n//         const url = new URL(lastPage.next)\n//         const nextOffset = url.searchParams.get('offset')\n//         return nextOffset ? parseInt(nextOffset) : undefined\n//       }\n//       return undefined\n//     },\n//   })\n// }\n\n// ✅ 수정된 버전\nconst usePlaylistItems = ({ playlist_id, limit }: Omit<GetPlaylistItemsRequest, 'offset'>) => {\n  return useInfiniteQuery({\n    queryKey: ['playlist-items', playlist_id],\n    queryFn: ({ pageParam = 0 }) => getPlaylistItems({ playlist_id, limit, offset: pageParam }),\n    initialPageParam: 0,\n    getNextPageParam: (lastPage) => {\n      if (lastPage.next) {\n        const url = new URL(lastPage.next)\n        const nextOffset = url.searchParams.get('offset')\n        return nextOffset ? parseInt(nextOffset) : undefined\n      }\n      return undefined\n    },\n  })\n}\n\nexport default usePlaylistItems\n","import React, { useEffect } from 'react'\nimport { Episode, PlaylistTrack, Track } from '../../../models/playlist'\nimport { styled, Table, TableBody, TableCell, TableContainer, TableRow } from '@mui/material'\nimport useGetPlaylistItems from '../../../hooks/useGetPlaylistItems'\nimport { useInView } from 'react-intersection-observer'\n\ninterface DesktopPlaylistItemProps {\n  index: number\n  item: PlaylistTrack\n  playlist_id: string\n}\n\nconst NoBorderTableCell = styled(TableCell)(() => ({\n  borderBottom: 'none',\n}))\n\nconst HoverTableRow = styled(TableRow)(({ theme }) => ({\n  '&:hover': {\n    backgroundColor: theme.palette.action.hover,\n  },\n}))\n\n// const PlaylistContainer = styled('div')({\n//   '&::-webkit-scrollbar': {\n//     display: 'none',\n//   },\n// })\n\n// const TableRow = styled('table')(({ theme }) => ({\n//   maxHeight: '70vh', // 원하는 스크롤 영역 높이\n//   overflowY: 'auto',\n//   '&::-webkit-scrollbar': {\n//     display: 'none',\n//   },\n//   msOverflowStyle: 'none', // IE, Edge\n//   scrollbarWidth: 'none', // Firefox\n// }))\n\nconst DesktopPlaylistItem = ({ item, index, playlist_id }: DesktopPlaylistItemProps) => {\n  // const { data, fetchNextPage, hasNextPage, isFetchingNextPage } = useGetPlaylistItems({\n  //   limit: 10,\n  //   offset: 0,\n  //   playlist_id,\n  // })\n\n  const { data, fetchNextPage, hasNextPage, isFetchingNextPage } = useGetPlaylistItems({\n    playlist_id,\n    limit: 10,\n  })\n\n  console.log('ddd', data)\n\n  const { ref, inView } = useInView()\n\n  useEffect(() => {\n    if (inView && hasNextPage && !isFetchingNextPage) {\n      fetchNextPage()\n    }\n  }, [inView, hasNextPage, isFetchingNextPage])\n\n  const isEpisode = (track: Track | Episode): track is Episode => {\n    return 'description' in track\n  }\n\n  let now = new Date()\n  let year = now.getFullYear()\n  let month = String(now.getMonth() + 1).padStart(2, '0') // 1월은 1이 아니라 0이라서 +1 해주고, 1자리 수면 0 추가\n  let date = String(now.getDate()).padStart(2, '0')\n  let minutes = String(now.getMinutes())\n  let seconds = String(now.getSeconds())\n  let dateAdded = `${year}-${month}-${date}`\n  let duration = `${minutes}:${seconds}`\n\n  return (\n    // <PlaylistTableContainer>\n    <HoverTableRow>\n      <NoBorderTableCell>{index}</NoBorderTableCell>\n      <NoBorderTableCell>{item.track.name || 'no name'}</NoBorderTableCell>\n      <NoBorderTableCell>{isEpisode(item.track) ? 'N/A' : item.track.album?.name}</NoBorderTableCell>\n      <NoBorderTableCell>{dateAdded || 'Unknown'}</NoBorderTableCell>\n      <NoBorderTableCell>\n        {duration || 'Unknown'}\n        <span ref={ref} style={{ display: 'inline-block', width: 1, height: 1 }} />\n      </NoBorderTableCell>\n    </HoverTableRow>\n    //   // </PlaylistTableContainer>\n    //   // <PlaylistTableContainer>\n    //   //   <TableContainer>\n    //   //     <Table>\n    //   //       <TableBody>\n    //   //         {items.map((item, index) => (\n    //   //           <DesktopPlaylistItem key={item.track.id} item={item} index={index + 1} playlist_id={playlistId} />\n    //   //         ))}\n    //   //       </TableBody>\n    //   //     </Table>\n    //   //   </TableContainer>\n    //   // </PlaylistTableContainer>\n  )\n}\n\nexport default DesktopPlaylistItem\n","import { TextField, Typography } from '@mui/material'\nimport React, { useState } from 'react'\n\nconst EmptyPlaylistWithSearch = () => {\n  const [keyword, setKeyword] = useState<string>('')\n  const handleSearchKeyword = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setKeyword(event.target.value)\n  }\n  return (\n    <div>\n      <Typography variant=\"h1\" my=\"10px\">\n        Let's find something for your playlist\n      </Typography>\n      <TextField value={keyword} onChange={handleSearchKeyword} />\n    </div>\n  )\n}\n\nexport default EmptyPlaylistWithSearch\n","import React from 'react'\nimport { Navigate, useParams } from 'react-router'\nimport useGetPlaylist from '../../hooks/useGetPlaylist'\nimport { styled, Table, TableBody, TableCell, TableHead, TableRow, Typography, useTheme } from '@mui/material'\nimport LoadingPage from '../../common/components/LoadingPage'\nimport usePlaylistItems from '../../hooks/useGetPlaylistItems'\nimport DesktopPlaylistItem from './components/DesktopPlaylistItem'\nimport { PAGE_LIMIT } from '../../configs/commonConfig'\nimport EmptyPlaylistWithSearch from './components/EmptyPlaylistWithSearch'\n\nconst PlaylistDetailContainer = styled('div')(({ theme }) => ({\n  width: '100%',\n  padding: '16px 16px 0px 16px',\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  gap: '16px',\n}))\n\nconst PlaylistHeader = styled('div')(({ theme }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  marginLeft: '20px',\n}))\n\nconst TableWrapper = styled('div')(() => ({\n  overflowY: 'auto',\n  maxHeight: 'calc(100vh - 300px - 100px)',\n  width: '100%',\n  '&::-webkit-scrollbar': {\n    display: 'none',\n  },\n  msOverflowStyle: 'none',\n  scrollbarWidth: 'none',\n}))\n\nconst PlaylistDetailPage = () => {\n  const { id } = useParams<{ id: string }>()\n  const { data: playlist, isLoading } = useGetPlaylist({\n    playlist_id: id || '',\n  })\n  console.log(playlist)\n\n  const {\n    data: playlistItems,\n    isLoading: isPlaylistItemsLoading,\n    error: playlistItemsLoading,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n  } = usePlaylistItems({ playlist_id: id || '', limit: 10 })\n\n  console.log('ddd', playlistItems)\n\n  if (!id) return <Navigate to=\"/\" />\n  if (isLoading || !playlist) return <LoadingPage />\n\n  const imageUrl = playlist.images?.[0]?.url || ''\n\n  return (\n    <PlaylistDetailContainer>\n      <img\n        src={imageUrl || '/images/noImage.png'}\n        alt={playlist.name}\n        loading=\"lazy\"\n        style={{ borderRadius: 8, width: 100, height: 100 }}\n      />\n      <PlaylistHeader>\n        <Typography variant=\"h3\" fontWeight={700} color=\"white\">\n          {playlist.name}\n        </Typography>\n        <Typography variant=\"h2\" fontWeight={700} color=\"theme.primary\">\n          {playlist.owner.display_name}\n        </Typography>\n        <Typography variant=\"h2\" fontWeight={700} color=\"theme.primary\">\n          {playlist?.tracks?.total ?? 0} songs\n        </Typography>\n      </PlaylistHeader>\n      {playlist?.tracks?.total === 0 ? (\n        <EmptyPlaylistWithSearch />\n      ) : (\n        <TableWrapper>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>#</TableCell>\n                <TableCell>Title</TableCell>\n                <TableCell>Album</TableCell>\n                <TableCell>Date Added</TableCell>\n                <TableCell>Duration</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {playlistItems?.pages.map((page, pageIndex) =>\n                page.items.map((item, itemIndex) => {\n                  return (\n                    <DesktopPlaylistItem\n                      item={item}\n                      key={pageIndex * PAGE_LIMIT + itemIndex + 1}\n                      index={pageIndex * PAGE_LIMIT + itemIndex + 1}\n                      playlist_id={id}\n                    />\n                  )\n                })\n              )}\n            </TableBody>\n          </Table>\n        </TableWrapper>\n      )}\n    </PlaylistDetailContainer>\n  )\n}\n\nexport default PlaylistDetailPage\n","import { useQuery } from '@tanstack/react-query'\nimport { GetPlaylistRequest } from '../models/playlist'\nimport { getPlaylist } from '../apis/playlistApi'\n\nconst useGetPlaylist = (params: GetPlaylistRequest) => {\n  return useQuery({\n    queryKey: ['playlist-detali', params.playlist_id],\n    queryFn: () => {\n      return getPlaylist(params)\n    },\n    enabled: !!params.playlist_id,\n  })\n}\n\nexport default useGetPlaylist\n","import {\n  CreatePlaylistRequest,\n  GetCurrentUserPlaylistRequest,\n  GetCurrentUserPlaylistResponse,\n  GetPlaylistItemsRequest,\n  GetPlaylistItemsResponse,\n  GetPlaylistRequest,\n  Playlist,\n} from '../models/playlist'\nimport api from '../utils/api'\n\nexport const getCurrentUserPlaylists = async ({\n  limit,\n  offset,\n}: GetCurrentUserPlaylistRequest): Promise<GetCurrentUserPlaylistResponse> => {\n  try {\n    const response = await api.get(`/me/playlists`, {\n      params: { limit, offset },\n    })\n    return response.data\n  } catch (error) {\n    throw new Error('fila to fetch current user playlists')\n  }\n}\n\nexport const getPlaylist = async (params: GetPlaylistRequest): Promise<Playlist> => {\n  try {\n    const response = await api.get(`/playlists/${params.playlist_id}`, {\n      params,\n    })\n    return response.data\n  } catch (error) {\n    throw new Error('fail to fetch playlist detail')\n  }\n}\n\nexport const getPlaylistItems = async (params: GetPlaylistItemsRequest): Promise<GetPlaylistItemsResponse> => {\n  try {\n    const response = await api.get(`/playlists/${params.playlist_id}/tracks`, {\n      params,\n    })\n    return response.data\n  } catch (error) {\n    throw new Error('fail to fetch playlist items')\n  }\n}\n\nexport const createPlaylist = async (user_id: string, params: CreatePlaylistRequest): Promise<Playlist> => {\n  try {\n    const { name, playlist_public, collaborative, description } = params\n    const response = await api.post(`/users/${user_id}/playlists`, {\n      name,\n      public: playlist_public,\n      collaborative,\n      description,\n    })\n    return response.data\n  } catch (error) {\n    throw new Error('fail to fetch create playlist')\n  }\n}\n"],"names":["api","axios","create","baseURL","SPOTIFY_BASE_URL","headers","Authorization","concat","localStorage","getItem","interceptors","request","use","_ref","playlist_id","limit","useInfiniteQuery","queryKey","queryFn","_ref2","pageParam","getPlaylistItems","offset","initialPageParam","getNextPageParam","lastPage","next","nextOffset","URL","searchParams","get","parseInt","undefined","NoBorderTableCell","styled","TableCell","borderBottom","HoverTableRow","TableRow","theme","backgroundColor","palette","action","hover","_item$track$album","item","index","data","fetchNextPage","hasNextPage","isFetchingNextPage","useGetPlaylistItems","console","log","ref","inView","useInView","useEffect","now","Date","year","getFullYear","month","String","getMonth","padStart","date","getDate","minutes","getMinutes","seconds","getSeconds","dateAdded","duration","_jsxs","children","_jsx","track","name","album","style","display","width","height","EmptyPlaylistWithSearch","keyword","setKeyword","useState","Typography","variant","my","TextField","value","onChange","event","target","PlaylistDetailContainer","padding","flexDirection","alignItems","gap","PlaylistHeader","marginLeft","TableWrapper","overflowY","maxHeight","msOverflowStyle","scrollbarWidth","PlaylistDetailPage","_playlist$images","_playlist$tracks$tota","_playlist$tracks","_playlist$tracks2","id","useParams","playlist","isLoading","params","useQuery","getPlaylist","enabled","playlistItems","isPlaylistItemsLoading","error","playlistItemsLoading","usePlaylistItems","Navigate","to","LoadingPage","imageUrl","images","url","src","alt","loading","borderRadius","fontWeight","color","owner","display_name","tracks","total","Table","TableHead","TableBody","pages","map","page","pageIndex","items","itemIndex","DesktopPlaylistItem","PAGE_LIMIT","getCurrentUserPlaylists","async","Error","createPlaylist","user_id","playlist_public","collaborative","description","post","public"],"sourceRoot":""}