{"version":3,"file":"821.js?ver=9ff2b6bc914460d788cc","mappings":"oJAGA,MAAMA,EAAMC,EAAAA,EAAMC,OAAO,CACvBC,QAASC,EAAAA,EACTC,QAAS,CACP,eAAgB,mBAChBC,cAAe,UAAFC,OAAYC,aAAaC,QAAQ,oBAIlDT,EAAIU,aAAaC,QAAQC,KAAKD,IAC5BA,EAAQN,QAAQC,cAAgB,UAAHC,OAAaC,aAAaC,QAAQ,iBACxDE,KAGT,S,4ECVe,SAASE,IACtB,MAAMC,GAAQ,OAAe,KAM7B,OAAOA,EAAM,MAAaA,CAC5B,C,+ICRA,MAAMC,GAA0BC,EAAAA,EAAAA,IAAO,MAAPA,EAAcC,IAAA,IAAC,MAAEH,GAAOG,EAAA,MAAM,CAC5DC,MAAO,OACPC,OAAQ,QACRC,QAAS,OACTC,QAAS,OACTC,WAAY,SACZC,IAAK,WAGDC,GAAiBR,EAAAA,EAAAA,IAAO,MAAPA,EAAcS,IAAA,IAAC,MAAEX,GAAOW,EAAA,MAAM,CACnDJ,QAAS,OACTK,cAAe,SACfC,WAAY,WAuCd,EApC2BC,KAAM,IAAAC,EAC/B,MAAM,GAAEC,IAAOC,EAAAA,EAAAA,MACPC,KAAMC,EAAQ,UAAEC,ICnBFC,EDmB+B,CACnDC,YAAaN,GAAM,KCnBdO,EAAAA,EAAAA,GAAS,CACdC,SAAU,CAAC,kBAAmBH,EAAOC,aACrCG,QAASA,KACAC,EAAAA,EAAAA,GAAYL,GAErBM,UAAWN,EAAOC,eANED,MDyBtB,GAHAO,QAAQC,IAAIV,IACEpB,EAAAA,EAAAA,MAETiB,EAAI,OAAOc,EAAAA,EAAAA,KAACC,EAAAA,GAAQ,CAACC,GAAG,MAC7B,GAAIZ,IAAcD,EAAU,OAAOW,EAAAA,EAAAA,KAACG,EAAAA,EAAW,IAE/C,MAAMC,GAA0B,QAAfnB,EAAAI,EAASgB,cAAM,IAAApB,GAAK,QAALA,EAAfA,EAAkB,UAAE,IAAAA,OAAA,EAApBA,EAAsBqB,MAAO,GAE9C,OACEC,EAAAA,EAAAA,MAACpC,EAAuB,CAAAqC,SAAA,EACtBR,EAAAA,EAAAA,KAAA,OACES,IAAKL,GAAY,oBACjBM,IAAKrB,EAASsB,KACdC,QAAQ,OACRC,MAAO,CAAEC,aAAc,EAAGxC,MAAO,IAAKC,OAAQ,QAEhDgC,EAAAA,EAAAA,MAAC3B,EAAc,CAAA4B,SAAA,EACbR,EAAAA,EAAAA,KAACe,EAAAA,EAAU,CAACC,QAAQ,KAAKC,WAAY,IAAKC,MAAM,QAAOV,SACpDnB,EAASsB,QAEZX,EAAAA,EAAAA,KAACe,EAAAA,EAAU,CAACC,QAAQ,KAAKC,WAAY,IAAKC,MAAM,gBAAeV,SAC5DnB,EAAS8B,MAAMC,gBAElBb,EAAAA,EAAAA,MAACQ,EAAAA,EAAU,CAACC,QAAQ,KAAKC,WAAY,IAAKC,MAAM,gBAAeV,SAAA,CAC5DnB,EAASgB,OAAOgB,OAAO,kB,wDE1C3B,MAAMC,EAA0BC,UAGuC,IAHhC,MAC5CC,EAAK,OACLC,GAC8BpD,EAC9B,IAIE,aAHuBjB,EAAAA,EAAIsE,IAAI,gBAAiB,CAC9CnC,OAAQ,CAAEiC,QAAOC,aAEHrC,IAClB,CAAE,MAAOuC,GACP,MAAM,IAAIC,MAAM,uCAClB,GAGWhC,EAAc2B,UACzB,IAIE,aAHuBnE,EAAAA,EAAIsE,IAAI,cAAD/D,OAAe4B,EAAOC,aAAe,CACjED,YAEcH,IAClB,CAAE,MAAOuC,GACP,MAAM,IAAIC,MAAM,gCAClB,E","sources":["webpack://spotify-demo/./src/utils/api.ts","webpack://spotify-demo/./node_modules/@mui/material/esm/styles/useTheme.js","webpack://spotify-demo/./src/pages/PlaylistDetailPage/PlaylistDetailPage.tsx","webpack://spotify-demo/./src/hooks/useGetPlaylist.ts","webpack://spotify-demo/./src/apis/playlistApi.ts"],"sourcesContent":["import axios from 'axios'\nimport { SPOTIFY_BASE_URL } from '../configs/commonConfig'\n\nconst api = axios.create({\n  baseURL: SPOTIFY_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${localStorage.getItem('access_token')}`,\n  },\n})\n\napi.interceptors.request.use((request) => {\n  request.headers.Authorization = `Bearer ${localStorage.getItem('access_token')}`\n  return request\n})\n\nexport default api\n","'use client';\n\nimport * as React from 'react';\nimport { useTheme as useThemeSystem } from '@mui/system';\nimport defaultTheme from \"./defaultTheme.js\";\nimport THEME_ID from \"./identifier.js\";\nexport default function useTheme() {\n  const theme = useThemeSystem(defaultTheme);\n  if (process.env.NODE_ENV !== 'production') {\n    // TODO: uncomment once we enable eslint-plugin-react-compiler // eslint-disable-next-line react-compiler/react-compiler\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    React.useDebugValue(theme);\n  }\n  return theme[THEME_ID] || theme;\n}","import React from 'react'\nimport { Navigate, useParams } from 'react-router'\nimport useGetPlaylist from '../../hooks/useGetPlaylist'\nimport { styled, Typography, useTheme } from '@mui/material'\nimport LoadingPage from '../../common/components/LoadingPage'\n\nconst PlaylistDetailContainer = styled('div')(({ theme }) => ({\n  width: '100%',\n  height: '200px',\n  padding: '16px',\n  display: 'flex',\n  alignItems: 'center',\n  gap: '16px',\n}))\n\nconst PlaylistHeader = styled('div')(({ theme }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  marginLeft: '20px',\n}))\n\nconst PlaylistDetailPage = () => {\n  const { id } = useParams<{ id: string }>()\n  const { data: playlist, isLoading } = useGetPlaylist({\n    playlist_id: id || '',\n  })\n  console.log(playlist)\n  const theme = useTheme() // 없으면 에러\n\n  if (!id) return <Navigate to=\"/\" />\n  if (isLoading || !playlist) return <LoadingPage />\n\n  const imageUrl = playlist.images?.[0]?.url || ''\n\n  return (\n    <PlaylistDetailContainer>\n      <img\n        src={imageUrl || '/broken-image.jpg'}\n        alt={playlist.name}\n        loading=\"lazy\"\n        style={{ borderRadius: 8, width: 100, height: 100 }}\n      />\n      <PlaylistHeader>\n        <Typography variant=\"h3\" fontWeight={700} color=\"white\">\n          {playlist.name}\n        </Typography>\n        <Typography variant=\"h2\" fontWeight={700} color=\"theme.primary\">\n          {playlist.owner.display_name}\n        </Typography>\n        <Typography variant=\"h2\" fontWeight={700} color=\"theme.primary\">\n          {playlist.images.length} songs\n        </Typography>\n      </PlaylistHeader>\n    </PlaylistDetailContainer>\n  )\n}\n\nexport default PlaylistDetailPage\n","import { useQuery } from '@tanstack/react-query'\nimport { GetPlaylistRequest } from '../models/playlist'\nimport { getPlaylist } from '../apis/playlistApi'\n\nconst useGetPlaylist = (params: GetPlaylistRequest) => {\n  return useQuery({\n    queryKey: ['playlist-detali', params.playlist_id],\n    queryFn: () => {\n      return getPlaylist(params)\n    },\n    enabled: !!params.playlist_id,\n  })\n}\n\nexport default useGetPlaylist\n","import {\n  GetCurrentUserPlaylistRequest,\n  GetCurrentUserPlaylistResponse,\n  GetPlaylistRequest,\n  Playlist,\n} from '../models/playlist'\nimport api from '../utils/api'\n\nexport const getCurrentUserPlaylists = async ({\n  limit,\n  offset,\n}: GetCurrentUserPlaylistRequest): Promise<GetCurrentUserPlaylistResponse> => {\n  try {\n    const response = await api.get(`/me/playlists`, {\n      params: { limit, offset },\n    })\n    return response.data\n  } catch (error) {\n    throw new Error('fila to fetch current user playlists')\n  }\n}\n\nexport const getPlaylist = async (params: GetPlaylistRequest): Promise<Playlist> => {\n  try {\n    const response = await api.get(`/playlists/${params.playlist_id}`, {\n      params,\n    })\n    return response.data\n  } catch (error) {\n    throw new Error('fail to fetch playlist detail')\n  }\n}\n"],"names":["api","axios","create","baseURL","SPOTIFY_BASE_URL","headers","Authorization","concat","localStorage","getItem","interceptors","request","use","useTheme","theme","PlaylistDetailContainer","styled","_ref","width","height","padding","display","alignItems","gap","PlaylistHeader","_ref2","flexDirection","marginLeft","PlaylistDetailPage","_playlist$images","id","useParams","data","playlist","isLoading","params","playlist_id","useQuery","queryKey","queryFn","getPlaylist","enabled","console","log","_jsx","Navigate","to","LoadingPage","imageUrl","images","url","_jsxs","children","src","alt","name","loading","style","borderRadius","Typography","variant","fontWeight","color","owner","display_name","length","getCurrentUserPlaylists","async","limit","offset","get","error","Error"],"sourceRoot":""}