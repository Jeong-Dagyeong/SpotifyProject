{"version":3,"file":"269.js?ver=602957cdbcb07ced2739","mappings":"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","sources":["webpack://spotify-demo/./src/hooks/useGetPlaylistItems.ts","webpack://spotify-demo/./src/pages/PlaylistDetailPage/components/DesktopPlaylistItem.tsx","webpack://spotify-demo/./src/models/search.ts","webpack://spotify-demo/./src/pages/PlaylistDetailPage/components/SearchResultList.tsx","webpack://spotify-demo/./src/pages/PlaylistDetailPage/components/EmptyPlaylistWithSearch.tsx","webpack://spotify-demo/./src/hooks/useSearchItemsWithKeyword.ts","webpack://spotify-demo/./src/apis/searchApi.ts","webpack://spotify-demo/./src/pages/PlaylistDetailPage/PlaylistDetailPage.tsx","webpack://spotify-demo/./src/hooks/useGetPlaylist.ts","webpack://spotify-demo/./src/hooks/useClientCredentialToken.ts","webpack://spotify-demo/./src/utils/api.ts","webpack://spotify-demo/./src/apis/playlistApi.ts"],"sourcesContent":["import { LastPage } from '@mui/icons-material'\nimport { useInfiniteQuery } from '@tanstack/react-query'\nimport { GetPlaylistItemsRequest } from '../models/playlist'\nimport { getPlaylistItems } from '../apis/playlistApi'\n\n// const usePlaylistItems = (params: GetPlaylistItemsRequest) => {\n//   return useInfiniteQuery({\n//     queryKey: ['playlist-items', params],\n//     queryFn: ({ pageParam }) => {\n//       return getPlaylistItems({ offset: pageParam, ...params })\n//     },\n//     initialPageParam: 0,\n//     getNextPageParam: (lastPage) => {\n//       if (lastPage.next) {\n//         const url = new URL(lastPage.next)\n//         const nextOffset = url.searchParams.get('offset')\n//         return nextOffset ? parseInt(nextOffset) : undefined\n//       }\n//       return undefined\n//     },\n//   })\n// }\n\n// ✅ 수정된 버전\nconst usePlaylistItems = ({ playlist_id, limit }: Omit<GetPlaylistItemsRequest, 'offset'>) => {\n  return useInfiniteQuery({\n    queryKey: ['playlist-items', playlist_id],\n    queryFn: ({ pageParam = 0 }) => getPlaylistItems({ playlist_id, limit, offset: pageParam }),\n    initialPageParam: 0,\n    getNextPageParam: (lastPage) => {\n      if (lastPage.next) {\n        const url = new URL(lastPage.next)\n        const nextOffset = url.searchParams.get('offset')\n        return nextOffset ? parseInt(nextOffset) : undefined\n      }\n      return undefined\n    },\n  })\n}\n\nexport default usePlaylistItems\n","import React, { useEffect } from 'react'\nimport { Episode, PlaylistTrack, Track } from '../../../models/playlist'\nimport { styled, Table, TableBody, TableCell, TableContainer, TableRow } from '@mui/material'\nimport useGetPlaylistItems from '../../../hooks/useGetPlaylistItems'\nimport { useInView } from 'react-intersection-observer'\n\ninterface DesktopPlaylistItemProps {\n  index: number\n  item: PlaylistTrack\n  playlist_id: string\n}\n\nconst NoBorderTableCell = styled(TableCell)(() => ({\n  borderBottom: 'none',\n}))\n\nconst HoverTableRow = styled(TableRow)(({ theme }) => ({\n  '&:hover': {\n    backgroundColor: theme.palette.action.hover,\n  },\n}))\n\n// const PlaylistContainer = styled('div')({\n//   '&::-webkit-scrollbar': {\n//     display: 'none',\n//   },\n// })\n\n// const TableRow = styled('table')(({ theme }) => ({\n//   maxHeight: '70vh', // 원하는 스크롤 영역 높이\n//   overflowY: 'auto',\n//   '&::-webkit-scrollbar': {\n//     display: 'none',\n//   },\n//   msOverflowStyle: 'none', // IE, Edge\n//   scrollbarWidth: 'none', // Firefox\n// }))\n\nconst DesktopPlaylistItem = ({ item, index, playlist_id }: DesktopPlaylistItemProps) => {\n  // const { data, fetchNextPage, hasNextPage, isFetchingNextPage } = useGetPlaylistItems({\n  //   limit: 10,\n  //   offset: 0,\n  //   playlist_id,\n  // })\n\n  const { data, fetchNextPage, hasNextPage, isFetchingNextPage } = useGetPlaylistItems({\n    playlist_id,\n    limit: 10,\n  })\n\n  console.log('ddd', data)\n\n  const { ref, inView } = useInView()\n\n  useEffect(() => {\n    if (inView && hasNextPage && !isFetchingNextPage) {\n      fetchNextPage()\n    }\n  }, [inView, hasNextPage, isFetchingNextPage])\n\n  const isEpisode = (track: Track | Episode): track is Episode => {\n    return 'description' in track\n  }\n\n  let now = new Date()\n  let year = now.getFullYear()\n  let month = String(now.getMonth() + 1).padStart(2, '0') // 1월은 1이 아니라 0이라서 +1 해주고, 1자리 수면 0 추가\n  let date = String(now.getDate()).padStart(2, '0')\n  let minutes = String(now.getMinutes())\n  let seconds = String(now.getSeconds())\n  let dateAdded = `${year}-${month}-${date}`\n  let duration = `${minutes}:${seconds}`\n\n  return (\n    // <PlaylistTableContainer>\n    <HoverTableRow>\n      <NoBorderTableCell>{index}</NoBorderTableCell>\n      <NoBorderTableCell>{item.track.name || 'no name'}</NoBorderTableCell>\n      <NoBorderTableCell>{isEpisode(item.track) ? 'N/A' : item.track.album?.name}</NoBorderTableCell>\n      <NoBorderTableCell>{dateAdded || 'Unknown'}</NoBorderTableCell>\n      <NoBorderTableCell>\n        {duration || 'Unknown'}\n        <span ref={ref} style={{ display: 'inline-block', width: 1, height: 1 }} />\n      </NoBorderTableCell>\n    </HoverTableRow>\n    //   // </PlaylistTableContainer>\n    //   // <PlaylistTableContainer>\n    //   //   <TableContainer>\n    //   //     <Table>\n    //   //       <TableBody>\n    //   //         {items.map((item, index) => (\n    //   //           <DesktopPlaylistItem key={item.track.id} item={item} index={index + 1} playlist_id={playlistId} />\n    //   //         ))}\n    //   //       </TableBody>\n    //   //     </Table>\n    //   //   </TableContainer>\n    //   // </PlaylistTableContainer>\n  )\n}\n\nexport default DesktopPlaylistItem\n","import { SimplifiedAlbum } from './album'\nimport { ApiResponse } from './apiResponse'\nimport { Artist } from './artist'\nimport { Show, SimplifiedEpisode, SimplifiedPlaylist, Track } from './playlist'\nimport { SimplifiedAudioBook } from './track'\n\nexport const enum SEARCH_TYPE {\n  Track = 'track',\n  Album = 'album',\n  Playlsit = 'playlist',\n  Show = 'show',\n  Episode = 'episode',\n  AudioBook = 'audiobook',\n  Atrist = 'artist',\n}\n\nexport interface SearchRequestParams {\n  q: string\n  type: SEARCH_TYPE[]\n  market?: string\n  limit?: number\n  offset?: number\n  include_external?: string\n}\n\nexport interface SearchResponse {\n  artists?: ApiResponse<Artist>\n  albums?: ApiResponse<SimplifiedAlbum>\n  tracks?: ApiResponse<Track>\n  playlists?: ApiResponse<SimplifiedPlaylist>\n  shows?: ApiResponse<Show>\n  episode?: ApiResponse<SimplifiedEpisode>\n  audiobooks?: ApiResponse<SimplifiedAudioBook>\n}\n","import React from 'react'\nimport { styled, Table, TableBody, TableCell, TableRow, Typography } from '@mui/material'\nimport { Track } from '../../../models/playlist'\nimport { useInView } from 'react-intersection-observer'\n\ninterface SearchResultListProps {\n  list: Track[]\n}\n\nconst HoverTableRow = styled(TableRow)(({ theme }) => ({\n  '&:hover': {\n    backgroundColor: theme.palette.action.hover,\n  },\n}))\n\nconst NoBorderTableCell = styled(TableCell)(() => ({\n  borderBottom: 'none',\n}))\n\nconst AlbumImage = styled('img')({\n  borderRadius: '4px',\n  marginRight: '12px',\n})\n\nconst TableWrapper = styled('div')(() => ({\n  overflowY: 'auto',\n  maxHeight: 'calc(100vh - 300px - 100px)',\n  width: '100%',\n  '&::-webkit-scrollbar': {\n    display: 'none',\n  },\n  msOverflowStyle: 'none',\n  scrollbarWidth: 'none',\n}))\n\nconst SearchResultList = ({ list }: SearchResultListProps) => {\n  const { ref, inView } = useInView()\n\n  return (\n    <TableWrapper style={{ marginTop: '40px' }}>\n      <Table>\n        <TableBody>\n          {list.map((track, index) => (\n            <HoverTableRow key={track.id || index}>\n              <NoBorderTableCell>{index + 1}</NoBorderTableCell>\n              <NoBorderTableCell>\n                <AlbumImage src={track.album?.images[0]?.url || '/images/noImage.png'} width=\"40px\" />\n                {track.name}\n              </NoBorderTableCell>\n              <NoBorderTableCell>{track.album?.name}</NoBorderTableCell>\n              <NoBorderTableCell>{track.artists?.[0]?.name || 'Unknown Artist'}</NoBorderTableCell>\n              <NoBorderTableCell>\n                <span ref={ref} style={{ display: 'inline-block', width: 1, height: 1 }} />\n              </NoBorderTableCell>\n            </HoverTableRow>\n          ))}\n        </TableBody>\n      </Table>\n    </TableWrapper>\n  )\n}\n\nexport default SearchResultList\n","import { Box, InputAdornment, styled, TextField, Typography } from '@mui/material'\nimport React, { useState } from 'react'\nimport useSearchItemsByKeyword from '../../../hooks/useSearchItemsWithKeyword'\nimport { SEARCH_TYPE } from '../../../models/search'\nimport SearchResultList from './SearchResultList'\nimport LoadingPage from '../../../common/components/LoadingPage'\nimport SearchIcon from '@mui/icons-material/Search'\n\nconst EmptyPlaylistWithSearch = () => {\n  const EmptyResult = styled(Box)({\n    display: 'flex',\n    flexDirection: 'column',\n    gap: '40px',\n    marginTop: '40px',\n  })\n\n  const [keyword, setKeyword] = useState<string>('')\n  console.log('keyword', keyword)\n\n  const { data, error, isLoading } = useSearchItemsByKeyword({\n    q: keyword,\n    type: [SEARCH_TYPE.Track],\n  })\n  console.log('ddd', data)\n\n  const tracks = data?.pages[0]?.tracks?.items ?? [] //널 병합 연산자라고 불립니다. 이 연산자는 왼쪽의 값이 null 또는 undefined일 때 오른쪽의 값을 반환하고, 그렇지 않으면 왼쪽의 값을 반환합니다.\n  const hasResults = tracks.length > 0\n\n  const handleSearchKeyword = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setKeyword(event.target.value)\n  }\n  return (\n    <div>\n      <Typography variant=\"h1\" my=\"10px\" marginBottom=\"20px\">\n        Let's find something for your playlist\n      </Typography>\n      <TextField\n        value={keyword}\n        onChange={handleSearchKeyword}\n        placeholder=\"Search...\"\n        slotProps={{\n          input: {\n            startAdornment: (\n              <InputAdornment position=\"start\">\n                <SearchIcon style={{ color: 'white' }} />\n              </InputAdornment>\n            ),\n          },\n        }}\n        style={{ width: '100%' }}\n      />\n      {/* </SearchEngine> */}\n      {isLoading ? (\n        <LoadingPage />\n      ) : hasResults ? (\n        <SearchResultList list={tracks} />\n      ) : keyword === '' ? (\n        <></> // 검색어가 없을 때는 아무것도 표시하지 않음\n      ) : (\n        <EmptyResult>\n          <Typography variant=\"h1\" gutterBottom>\n            {`검색결과 : \"${keyword}\"는 존재하지 않습니다.`}\n          </Typography>\n        </EmptyResult>\n      )}\n    </div>\n  )\n}\n\nexport default EmptyPlaylistWithSearch\n","import { useInfiniteQuery } from '@tanstack/react-query'\nimport { searchItemByKeyword } from '../apis/searchApi'\nimport { SearchRequestParams } from '../models/search'\nimport useClientCredentialToken from './useClientCredentialToken'\n\nconst useSearchItemsByKeyword = (params: SearchRequestParams) => {\n  const clientCredentialToken = useClientCredentialToken()\n  return useInfiniteQuery({\n    queryKey: ['search', params],\n    queryFn: ({ pageParam = 0 }) => {\n      if (!clientCredentialToken) throw new Error('no token available')\n      return searchItemByKeyword(clientCredentialToken, {\n        ...params,\n        offset: pageParam,\n      })\n    },\n    initialPageParam: 0,\n    getNextPageParam: (lastPage) => {\n      const nextPageUrl =\n        lastPage.tracks?.next ||\n        lastPage.artists?.next ||\n        lastPage.albums?.next ||\n        lastPage.playlists?.next ||\n        lastPage.shows?.next ||\n        lastPage.episode?.next ||\n        lastPage.audiobooks?.next\n\n      if (nextPageUrl) {\n        const nextOffset = new URL(nextPageUrl).searchParams.get('offset')\n        return nextOffset ? parseInt(nextOffset) : undefined\n      }\n      return undefined\n    },\n    enabled: !!params.q,\n  })\n}\n\nexport default useSearchItemsByKeyword\n","import { SearchRequestParams, SearchResponse } from './../models/search'\nimport axios from 'axios'\nimport { SPOTIFY_BASE_URL } from '../configs/commonConfig'\n\nexport const searchItemByKeyword = async (token: string, params: SearchRequestParams): Promise<SearchResponse> => {\n  try {\n    const searchParams = new URLSearchParams()\n    searchParams.append('q', params.q)\n    searchParams.append('type', params.type.join(','))\n\n    if (params.market) searchParams.append('market', params.market)\n    if (params.limit) searchParams.append('limit', params.limit.toString())\n    if (params.offset) searchParams.append('offset', params.offset.toString())\n    if (params.include_external) searchParams.append('include_external', params.include_external)\n    const response = await axios.get(`${SPOTIFY_BASE_URL}/search?${searchParams.toString()}`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        'Content-Type': 'application/json',\n      },\n    })\n    return response.data\n  } catch (error) {\n    throw new Error('fail to search by keyword')\n  }\n}\n","import React from 'react'\nimport { Navigate, useParams } from 'react-router'\nimport useGetPlaylist from '../../hooks/useGetPlaylist'\nimport { styled, Table, TableBody, TableCell, TableHead, TableRow, Typography, useTheme } from '@mui/material'\nimport LoadingPage from '../../common/components/LoadingPage'\nimport usePlaylistItems from '../../hooks/useGetPlaylistItems'\nimport DesktopPlaylistItem from './components/DesktopPlaylistItem'\nimport { PAGE_LIMIT } from '../../configs/commonConfig'\nimport EmptyPlaylistWithSearch from './components/EmptyPlaylistWithSearch'\n\nconst PlaylistDetailContainer = styled('div')(({ theme }) => ({\n  width: '100%',\n  padding: '16px 16px 0px 16px',\n  display: 'flex',\n  flexDirection: 'column',\n  alignItems: 'center',\n  gap: '16px',\n}))\n\nconst PlaylistHeader = styled('div')(({ theme }) => ({\n  display: 'flex',\n  flexDirection: 'column',\n  marginLeft: '20px',\n}))\n\nconst TableWrapper = styled('div')(() => ({\n  overflowY: 'auto',\n  maxHeight: 'calc(100vh - 300px - 100px)',\n  width: '100%',\n  '&::-webkit-scrollbar': {\n    display: 'none',\n  },\n  msOverflowStyle: 'none',\n  scrollbarWidth: 'none',\n}))\n\nconst PlaylistDetailPage = () => {\n  const { id } = useParams<{ id: string }>()\n  const { data: playlist, isLoading } = useGetPlaylist({\n    playlist_id: id || '',\n  })\n\n  const {\n    data: playlistItems,\n    isLoading: isPlaylistItemsLoading,\n    error: playlistItemsLoading,\n    fetchNextPage,\n    hasNextPage,\n    isFetchingNextPage,\n  } = usePlaylistItems({ playlist_id: id || '', limit: 10 })\n\n  if (!id) return <Navigate to=\"/\" />\n  if (isLoading || !playlist) return <LoadingPage />\n\n  const imageUrl = playlist.images?.[0]?.url || ''\n\n  return (\n    <PlaylistDetailContainer>\n      <img\n        src={imageUrl || '/images/noImage.png'}\n        alt={playlist.name}\n        loading=\"lazy\"\n        style={{ borderRadius: 8, width: 100, height: 100 }}\n      />\n      <PlaylistHeader>\n        <Typography variant=\"h3\" fontWeight={700} color=\"white\">\n          {playlist.name}\n        </Typography>\n        <Typography variant=\"h2\" fontWeight={700} color=\"theme.primary\">\n          {playlist.owner.display_name}\n        </Typography>\n        <Typography variant=\"h2\" fontWeight={700} color=\"theme.primary\">\n          {playlist?.tracks?.total ?? 0} songs\n        </Typography>\n      </PlaylistHeader>\n      {playlist?.tracks?.total === 0 ? (\n        <EmptyPlaylistWithSearch />\n      ) : (\n        <TableWrapper>\n          <Table>\n            <TableHead>\n              <TableRow>\n                <TableCell>#</TableCell>\n                <TableCell>Title</TableCell>\n                <TableCell>Album</TableCell>\n                <TableCell>Date Added</TableCell>\n                <TableCell>Duration</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {playlistItems?.pages.map((page, pageIndex) =>\n                page.items.map((item, itemIndex) => {\n                  return (\n                    <DesktopPlaylistItem\n                      item={item}\n                      key={pageIndex * PAGE_LIMIT + itemIndex + 1}\n                      index={pageIndex * PAGE_LIMIT + itemIndex + 1}\n                      playlist_id={id}\n                    />\n                  )\n                })\n              )}\n            </TableBody>\n          </Table>\n        </TableWrapper>\n      )}\n    </PlaylistDetailContainer>\n  )\n}\n\nexport default PlaylistDetailPage\n","import { useQuery } from '@tanstack/react-query'\nimport { GetPlaylistRequest } from '../models/playlist'\nimport { getPlaylist } from '../apis/playlistApi'\n\nconst useGetPlaylist = (params: GetPlaylistRequest) => {\n  return useQuery({\n    queryKey: ['playlist-detail', params.playlist_id],\n    queryFn: () => {\n      return getPlaylist(params)\n    },\n    // enabled: !!params.playlist_id,\n    enabled: Boolean(params?.playlist_id),\n  })\n}\n\nexport default useGetPlaylist\n","import { useQuery } from '@tanstack/react-query'\nimport { getClientCredentialToken } from '../apis/authApi'\n\nconst useClientCredentialToken = (): string | undefined => {\n  const { data } = useQuery({\n    queryKey: ['client-credential=token'],\n    queryFn: getClientCredentialToken,\n  })\n\n  const clientCredentialToken = data?.access_token\n\n  return clientCredentialToken\n}\n\nexport default useClientCredentialToken\n","import axios from 'axios'\nimport { SPOTIFY_BASE_URL } from '../configs/commonConfig'\n\nconst api = axios.create({\n  baseURL: SPOTIFY_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${localStorage.getItem('access_token')}`,\n  },\n})\n\napi.interceptors.request.use((request) => {\n  request.headers.Authorization = `Bearer ${localStorage.getItem('access_token')}`\n  return request\n})\n\nexport default api\n","import {\n  CreatePlaylistRequest,\n  GetCurrentUserPlaylistRequest,\n  GetCurrentUserPlaylistResponse,\n  GetPlaylistItemsRequest,\n  GetPlaylistItemsResponse,\n  GetPlaylistRequest,\n  Playlist,\n} from '../models/playlist'\nimport api from '../utils/api'\n\nexport const getCurrentUserPlaylists = async ({\n  limit,\n  offset,\n}: GetCurrentUserPlaylistRequest): Promise<GetCurrentUserPlaylistResponse> => {\n  try {\n    const response = await api.get(`/me/playlists`, {\n      params: { limit, offset },\n    })\n    return response.data\n  } catch (error) {\n    throw new Error('fila to fetch current user playlists')\n  }\n}\n\nexport const getPlaylist = async (params: GetPlaylistRequest): Promise<Playlist> => {\n  try {\n    const response = await api.get(`/playlists/${params.playlist_id}`, {\n      params,\n    })\n    return response.data\n  } catch (error) {\n    throw new Error('fail to fetch playlist detail')\n  }\n}\n\nexport const getPlaylistItems = async (params: GetPlaylistItemsRequest): Promise<GetPlaylistItemsResponse> => {\n  try {\n    const response = await api.get(`/playlists/${params.playlist_id}/tracks`, {\n      params,\n    })\n    return response.data\n  } catch (error) {\n    throw new Error('fail to fetch playlist items')\n  }\n}\n\nexport const createPlaylist = async (user_id: string, params: CreatePlaylistRequest): Promise<Playlist> => {\n  try {\n    const { name, playlist_public, collaborative, description } = params\n    const response = await api.post(`/users/${user_id}/playlists`, {\n      name,\n      public: playlist_public,\n      collaborative,\n      description,\n    })\n    return response.data\n  } catch (error) {\n    throw new Error('fail to fetch create playlist')\n  }\n}\n"],"names":["_ref","playlist_id","limit","useInfiniteQuery","queryKey","queryFn","_ref2","pageParam","getPlaylistItems","offset","initialPageParam","getNextPageParam","lastPage","next","nextOffset","URL","searchParams","get","parseInt","undefined","NoBorderTableCell","styled","TableCell","borderBottom","HoverTableRow","TableRow","theme","backgroundColor","palette","action","hover","_item$track$album","item","index","data","fetchNextPage","hasNextPage","isFetchingNextPage","useGetPlaylistItems","console","log","ref","inView","useInView","useEffect","now","Date","year","getFullYear","month","String","getMonth","padStart","date","getDate","minutes","getMinutes","seconds","getSeconds","dateAdded","concat","duration","_jsxs","children","_jsx","track","name","album","style","display","width","height","SEARCH_TYPE","AlbumImage","borderRadius","marginRight","TableWrapper","overflowY","maxHeight","msOverflowStyle","scrollbarWidth","list","marginTop","Table","TableBody","map","_track$album","_track$album2","_track$artists","src","images","url","artists","id","EmptyPlaylistWithSearch","_data$pages$0$tracks$","_data$pages$","EmptyResult","Box","flexDirection","gap","keyword","setKeyword","useState","error","isLoading","params","clientCredentialToken","useClientCredentialToken","Error","async","token","URLSearchParams","append","q","type","join","market","toString","include_external","axios","SPOTIFY_BASE_URL","headers","Authorization","searchItemByKeyword","_objectSpread","_lastPage$tracks","_lastPage$artists","_lastPage$albums","_lastPage$playlists","_lastPage$shows","_lastPage$episode","_lastPage$audiobooks","nextPageUrl","tracks","albums","playlists","shows","episode","audiobooks","enabled","useSearchItemsByKeyword","Track","pages","items","hasResults","length","Typography","variant","my","marginBottom","TextField","value","onChange","event","target","placeholder","slotProps","input","startAdornment","InputAdornment","position","SearchIcon","color","LoadingPage","SearchResultList","_Fragment","gutterBottom","PlaylistDetailContainer","padding","alignItems","PlaylistHeader","marginLeft","PlaylistDetailPage","_playlist$images","_playlist$tracks$tota","_playlist$tracks","_playlist$tracks2","useParams","playlist","useQuery","getPlaylist","Boolean","playlistItems","isPlaylistItemsLoading","playlistItemsLoading","usePlaylistItems","Navigate","to","imageUrl","alt","loading","fontWeight","owner","display_name","total","TableHead","page","pageIndex","itemIndex","DesktopPlaylistItem","PAGE_LIMIT","getClientCredentialToken","access_token","api","create","baseURL","localStorage","getItem","interceptors","request","use","getCurrentUserPlaylists","createPlaylist","user_id","playlist_public","collaborative","description","post","public"],"sourceRoot":""}