{"version":3,"file":"245.js?ver=602957cdbcb07ced2739","mappings":"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","sources":["webpack://spotify-demo/./src/utils/api.ts","webpack://spotify-demo/./src/apis/userApi.ts","webpack://spotify-demo/./src/hooks/useGetCurrentUserProfile.ts","webpack://spotify-demo/./src/utils/crypto.ts","webpack://spotify-demo/./src/utils/auth.ts","webpack://spotify-demo/./src/layout/components/EmptyPlaylist.tsx","webpack://spotify-demo/./src/layout/components/LibraryHead.tsx","webpack://spotify-demo/./src/hooks/useCreatePlaylist.ts","webpack://spotify-demo/./src/layout/components/Library.tsx","webpack://spotify-demo/./src/hooks/useGetCurrentUserPlaylists.ts","webpack://spotify-demo/./src/common/components/LoginBtn.tsx","webpack://spotify-demo/./src/layout/components/Navbar.tsx","webpack://spotify-demo/./src/layout/AppLayout.tsx","webpack://spotify-demo/./src/apis/playlistApi.ts"],"sourcesContent":["import axios from 'axios'\nimport { SPOTIFY_BASE_URL } from '../configs/commonConfig'\n\nconst api = axios.create({\n  baseURL: SPOTIFY_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n    Authorization: `Bearer ${localStorage.getItem('access_token')}`,\n  },\n})\n\napi.interceptors.request.use((request) => {\n  request.headers.Authorization = `Bearer ${localStorage.getItem('access_token')}`\n  return request\n})\n\nexport default api\n","import { User } from '../models/user'\nimport api from '../utils/api'\n\nexport const getCurrentUserProfile = async (): Promise<User> => {\n  try {\n    const response = await api.get(`/me`)\n    return response.data\n  } catch (error) {\n    throw new Error('fail to fetch user porfile')\n  }\n}\n","import { useQuery, UseQueryResult } from '@tanstack/react-query'\nimport { getCurrentUserProfile } from '../apis/userApi'\nimport { User } from '../models/user'\n\nconst useGetCurrentUserProfile = (): UseQueryResult<User, Error> => {\n  const accessToken = localStorage.getItem('access_token')\n  return useQuery({\n    queryKey: ['current-user-profile'],\n    queryFn: getCurrentUserProfile,\n    enabled: !!accessToken,\n  })\n}\n\nexport default useGetCurrentUserProfile\n","export const generateRandomString = (length: number): string => {\n  const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  const values = crypto.getRandomValues(new Uint8Array(length))\n  return values.reduce((acc, x) => acc + possible[x % possible.length], '')\n}\n\nexport const sha256 = async (plain: string): Promise<ArrayBuffer> => {\n  const encoder = new TextEncoder()\n  const data = encoder.encode(plain)\n  return window.crypto.subtle.digest('SHA-256', data)\n}\n\nexport const base64encode = (input: ArrayBuffer): string => {\n  return btoa(String.fromCharCode(...new Uint8Array(input)))\n    .replace(/=/g, '')\n    .replace(/\\+/g, '-')\n    .replace(/\\//g, '_')\n}\n","import { CLIENT_ID, SCOPES } from '../configs/authConfig'\nimport { REDIRECT_URI } from '../configs/commonConfig'\nimport { AuthUrlParams } from '../models/auth'\nimport { base64encode, generateRandomString, sha256 } from './crypto'\n\nexport const getSpotifyAuthUrl = async (): Promise<string> => {\n  const codeVerifier = generateRandomString(64)\n  const hashed = await sha256(codeVerifier)\n  const codeChallenge = base64encode(hashed)\n\n  const clientId = CLIENT_ID\n  const redirectUri = REDIRECT_URI\n\n  const scope = SCOPES\n  const authUrl = new URL('https://accounts.spotify.com/authorize')\n\n  // generated in the previous step\n  window.localStorage.setItem('code_verifier', codeVerifier)\n\n  if (clientId && redirectUri) {\n    const params: AuthUrlParams = {\n      response_type: 'code',\n      client_id: clientId,\n      scope,\n      code_challenge_method: 'S256',\n      code_challenge: codeChallenge,\n      redirect_uri: redirectUri,\n    }\n    authUrl.search = new URLSearchParams(Object.entries(params)).toString()\n    window.location.href = authUrl.toString() // spotify 로그인 주소를 연다\n    return authUrl.toString()\n  }\n  throw new Error('Missing client ID or redirect URI')\n}\n","import { Box, Button, styled, Typography } from '@mui/material'\n\nconst EmptyPlaylist = () => {\n  const Layout = styled('div')(({ theme }) => ({\n    heigth: '100vh',\n    // border: 'solid white',\n  }))\n  const AddPlaylist = styled('div')(({ theme }) => ({\n    width: '80%',\n    height: '150px',\n    backgroundColor: theme.palette.background.paper,\n    borderRadius: '10px',\n    padding: '20px',\n    margin: '0 auto',\n    marginTop: '10px',\n  }))\n\n  const CreatePlaylistBtn = styled(Button)(({ theme }) => ({\n    width: '120px',\n    height: '30px',\n    borderRadius: '30px',\n    backgroundColor: theme.palette.text.primary,\n    color: theme.palette.background.default,\n    textAlign: 'center',\n    marginTop: '20px',\n  }))\n  return (\n    <div>\n      <Layout>\n        <AddPlaylist>\n          <Typography variant=\"h2\" fontWeight={700}>\n            Create your first playlist\n          </Typography>\n          <Typography variant=\"body1\">It's easy, we'll help you</Typography>\n          <CreatePlaylistBtn>\n            <Typography variant=\"body1\" fontWeight={700}>\n              Create playlist\n            </Typography>\n          </CreatePlaylistBtn>\n        </AddPlaylist>\n      </Layout>\n    </div>\n  )\n}\n\nexport default EmptyPlaylist\n","import BookmarkIcon from '@mui/icons-material/Bookmark'\nimport { Button, Dialog, DialogActions, DialogTitle, styled, Typography } from '@mui/material'\nimport AddRoundedIcon from '@mui/icons-material/AddRounded'\nimport useCreatePlaylist from '../../hooks/useCreatePlaylist'\nimport LoginBtn from '../../common/components/LoginBtn'\nimport { getSpotifyAuthUrl } from '../../utils/auth'\nimport EmptyPlaylist from './EmptyPlaylist'\nimport { useState } from 'react'\nimport { useNavigate } from 'react-router'\nimport { useQueryClient } from '@tanstack/react-query'\n\nconst AddLibrary = styled('div')(({ theme }) => ({\n  display: 'flex',\n  justifyContent: 'space-evenly',\n  marginTop: '30px',\n}))\n\nconst LibraryHead = () => {\n  const { mutate: createPlaylist } = useCreatePlaylist()\n  const token = localStorage.getItem('access_token')\n  const [open, setOpen] = useState(false)\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  const handleCreateAndLogin = () => {\n    if (!token) {\n      openLoginDialog()\n      return\n    }\n    createPlaylist({ name: '나의 플레이리스트' })\n  }\n\n  const openLoginDialog = () => {\n    setOpen(true)\n  }\n\n  const redirectToLogin = async () => {\n    const authUrl = await getSpotifyAuthUrl()\n    window.location.href = authUrl\n  }\n\n  return (\n    <div>\n      <AddLibrary>\n        <BookmarkIcon />\n        <Typography variant=\"h2\" fontWeight={700}>\n          Your Library\n        </Typography>\n        <Button onClick={handleCreateAndLogin}>\n          <AddRoundedIcon sx={{ color: 'green' }} />\n        </Button>\n      </AddLibrary>\n\n      {!token && <EmptyPlaylist />}\n      <Dialog open={open} onClose={handleClose}>\n        <DialogTitle>로그인 후 사용 가능합니다.</DialogTitle>\n        <DialogActions>\n          <Button onClick={handleClose}>취소</Button>\n          <Button onClick={redirectToLogin} autoFocus>\n            로그인\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </div>\n  )\n}\n\nexport default LibraryHead\n","import { useMutation, useQueryClient } from '@tanstack/react-query'\nimport { createPlaylist } from '../apis/playlistApi'\nimport useGetCurrentUserProfile from './useGetCurrentUserProfile'\nimport { CreatePlaylistRequest } from '../models/playlist'\n\nconst useCreatePlaylist = () => {\n  const { data: user } = useGetCurrentUserProfile()\n  const queryClient = useQueryClient()\n  return useMutation({\n    mutationFn: (params: CreatePlaylistRequest) => {\n      if (user) {\n        return createPlaylist(user?.id || '', params)\n      }\n      return Promise.reject(new Error('user is not definded'))\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['current-user-playlists'] })\n      console.log('성공')\n    },\n  })\n}\n\nexport default useCreatePlaylist\n","import { ImageList, ImageListItem, Typography, styled } from '@mui/material'\nimport useGetCurrentUserPlaylists from '../../hooks/useGetCurrentUserPlaylists'\nimport useGetCurrentUserProfile from '../../hooks/useGetCurrentUserProfile'\nimport { useEffect, useState } from 'react'\nimport { useInView } from 'react-intersection-observer'\nimport { useNavigate } from 'react-router'\n\nconst PlaylistContainer = styled('div')(({ theme }) => ({\n  overflowY: 'auto',\n  maxHeight: 'calc(100vh - 240px)',\n  height: '100%',\n  padding: '12px',\n  '&::-webkit-scrollbar': {\n    display: 'none',\n  },\n  msOverflowStyle: 'none',\n  scrollbarWidth: 'none',\n  [theme.breakpoints.down('sm')]: {\n    maxHeight: 'calc(100vh - 65px - 119px)',\n  },\n}))\n\nconst HoverPlaylistItem = styled(ImageListItem)(({ theme }) => ({\n  '&:hover': {\n    backgroundColor: theme.palette.action.hover,\n  },\n}))\n\nconst Library = () => {\n  const [isLoggedIn, setIsLoggedIn] = useState(Boolean(localStorage.getItem('access_token')))\n  const navigate = useNavigate()\n  const { data, fetchNextPage, hasNextPage, isFetchingNextPage } = useGetCurrentUserPlaylists(\n    {\n      limit: 10,\n      offset: 0,\n    },\n    isLoggedIn\n  )\n  const { data: user } = useGetCurrentUserProfile()\n  const { ref, inView } = useInView()\n\n  useEffect(() => {\n    if (!isLoggedIn || !user || !data) return\n\n    if (inView && hasNextPage && !isFetchingNextPage) {\n      fetchNextPage()\n    }\n  }, [inView, hasNextPage, isFetchingNextPage, isLoggedIn, user, data])\n\n  useEffect(() => {\n    const syncLogin = () => setIsLoggedIn(Boolean(localStorage.getItem('access_token')))\n    window.addEventListener('storage', syncLogin)\n    return () => window.removeEventListener('storage', syncLogin)\n  }, [])\n  if (!user || !data) return null\n\n  const handleClick = (id: string) => {\n    navigate(`/playlist/${id}`)\n  }\n\n  return (\n    <PlaylistContainer>\n      <ImageList cols={2} gap={16} variant=\"standard\">\n        {data.pages.map((page, pageIndex) =>\n          page.items.map((playlist, i) => {\n            const imageUrl = Array.isArray(playlist.images) && playlist.images.length > 0 ? playlist.images[0].url : ''\n            const id = playlist.id\n            if (!id) return null\n            return (\n              <HoverPlaylistItem key={`${pageIndex}-${playlist.id}`} onClick={() => handleClick(id)}>\n                <img\n                  src={imageUrl || '/images/noImage.png'}\n                  alt={playlist.name}\n                  loading=\"lazy\"\n                  style={{ borderRadius: 8 }}\n                />\n                <Typography variant=\"subtitle1\" fontWeight={700} color=\"limegreen\" mt={1}>\n                  {playlist.name}\n                </Typography>\n                <Typography variant=\"body2\" color=\"#aaa\">\n                  Playlist • {playlist.owner.display_name}\n                </Typography>\n              </HoverPlaylistItem>\n            )\n          })\n        )}\n      </ImageList>\n      <div ref={ref} />\n    </PlaylistContainer>\n  )\n}\n\nexport default Library\n","import { useInfiniteQuery } from '@tanstack/react-query'\nimport { GetCurrentUserPlaylistRequest } from '../models/playlist'\nimport { getCurrentUserPlaylists } from '../apis/playlistApi'\n\n// const useGetCurrentUserPlaylists = ({ limit, offset }: GetCurrentUserPlaylistRequest) => {\n//   return useInfiniteQuery({\n//     queryKey: ['current-user-playlists'],\n//     queryFn: ({ pageParam = 0 }) => {\n//       return getCurrentUserPlaylists({ limit, offset: pageParam })\n//     },\n//     initialPageParam: 0, // 첫 시작값\n//     getNextPageParam: (lastPage) => {\n//       if (lastPage.next) {\n//         const url = new URL(lastPage.next)\n//         const nextOffset = url.searchParams.get('offset')\n//         return nextOffset ? parseInt(nextOffset) : undefined\n//       }\n//       return undefined\n//     },\n//   })\n// }\n\nconst useGetCurrentUserPlaylists = ({ limit, offset }: GetCurrentUserPlaylistRequest, enabled: boolean = true) => {\n  return useInfiniteQuery({\n    queryKey: ['current-user-playlists'],\n    queryFn: ({ pageParam = 0 }) => {\n      return getCurrentUserPlaylists({ limit, offset: pageParam })\n    },\n    initialPageParam: 0,\n    getNextPageParam: (lastPage) => {\n      if (lastPage.next) {\n        const url = new URL(lastPage.next)\n        const nextOffset = url.searchParams.get('offset')\n        return nextOffset ? parseInt(nextOffset) : undefined\n      }\n      return undefined\n    },\n    enabled, // ✅ 이게 핵심입니다\n  })\n}\n\nexport default useGetCurrentUserPlaylists\n","import { Button, styled } from '@mui/material'\nimport { getSpotifyAuthUrl } from '../../utils/auth'\n\nconst LoginBtn = () => {\n  const login = () => {\n    getSpotifyAuthUrl()\n  }\n  return (\n    <Button variant=\"contained\" color=\"secondary\" size=\"large\" onClick={login}>\n      Login\n    </Button>\n  )\n}\n\nexport default LoginBtn\n","// import { Avatar, Box } from '@mui/material'\n// import React, { useState } from 'react'\n// import LoginBtn from '../../common/components/LoginBtn'\n// import useGetCurrentUserProfile from '../../hooks/useGetCurrentUserProfile'\n\n// const Navbar = () => {\n//   const [imgError, setImgError] = useState(false)\n\n//   const { data: userProfile } = useGetCurrentUserProfile()\n//   const imageUrl = userProfile?.images?.[0]?.url\n\n//   return (\n//     <Box display=\"flex\" justifyContent=\"flex-end\" alignItems=\"center\" height=\"40px\">\n//       {userProfile ? (\n//         <Avatar\n//           src={!imgError && imageUrl ? imageUrl : '/broken-image.jpg'}\n//           onError={() => setImgError(true)}\n//           alt=\"user-profile\"\n//           sx={{ width: 32, height: 32 }}\n//         />\n//       ) : (\n//         <LoginBtn />\n//       )}\n//     </Box>\n//   )\n// }\n\n// export default Navbar\n\nimport React, { useState } from 'react'\nimport { Avatar, Box, Button, Dialog, DialogActions, DialogTitle, styled } from '@mui/material'\nimport useGetCurrentUserProfile from '../../hooks/useGetCurrentUserProfile'\nimport LoginBtn from '../../common/components/LoginBtn'\nimport { useNavigate } from 'react-router'\nimport { useQueryClient } from '@tanstack/react-query'\n\nconst HoverContainer = styled(Box)(({ theme }) => ({\n  position: 'relative',\n  display: 'inline-block',\n}))\n\nconst LogoutBox = styled(Box)(({ theme }) => ({\n  position: 'absolute',\n  top: '42px',\n  right: -25,\n  backgroundColor: theme.palette.background.paper,\n  boxShadow: theme.shadows[2],\n  padding: theme.spacing(1),\n  borderRadius: theme.shape.borderRadius,\n  zIndex: 10,\n}))\n\nconst Navbar = () => {\n  const [imgError, setImgError] = useState(false)\n  const [showLogout, setShowLogout] = useState(false)\n  const [open, setOpen] = useState(false)\n\n  const { data: userProfile } = useGetCurrentUserProfile()\n  const imageUrl = userProfile?.images?.[0]?.url\n  const navigate = useNavigate()\n  const logoutQueryClient = useQueryClient()\n\n  const handleAvatarClick = () => {\n    setShowLogout((prev) => !prev)\n  }\n\n  const handleClickOpen = () => {\n    setOpen(true)\n  }\n\n  const handleClose = () => {\n    setOpen(false)\n  }\n\n  const handleLogoutConfirm = () => {\n    localStorage.removeItem('access_token')\n    logoutQueryClient.clear()\n    navigate('/')\n    window.location.reload()\n  }\n\n  return (\n    <Box display=\"flex\" justifyContent=\"flex-end\" alignItems=\"center\" height=\"40px\" position=\"relative\">\n      {userProfile ? (\n        <HoverContainer>\n          <Avatar\n            src={!imgError && imageUrl ? imageUrl : '/broken-image.jpg'}\n            onError={() => setImgError(true)}\n            alt=\"user-profile\"\n            sx={{ width: 32, height: 32, cursor: 'pointer' }}\n            onClick={handleAvatarClick}\n          />\n          {showLogout && (\n            <LogoutBox>\n              <Button variant=\"text\" color=\"inherit\" size=\"small\" onClick={handleClickOpen}>\n                Logout\n              </Button>\n            </LogoutBox>\n          )}\n        </HoverContainer>\n      ) : (\n        <LoginBtn />\n      )}\n\n      <Dialog open={open} onClose={handleClose}>\n        <DialogTitle>로그아웃 하시겠습니까?</DialogTitle>\n        <DialogActions>\n          <Button onClick={handleClose}>취소</Button>\n          <Button onClick={handleLogoutConfirm} autoFocus>\n            확인\n          </Button>\n        </DialogActions>\n      </Dialog>\n    </Box>\n  )\n}\n\nexport default Navbar\n","import { Box, styled, Typography } from '@mui/material'\nimport { NavLink, Outlet } from 'react-router'\nimport HomeIcon from '@mui/icons-material/Home'\nimport SearchIcon from '@mui/icons-material/Search'\nimport LibraryHead from './components/LibraryHead'\nimport { useEffect, useState } from 'react'\nimport Library from './components/Library'\nimport Navbar from './components/Navbar'\nimport EmptyPlaylist from './components/EmptyPlaylist'\n\nconst Layout = styled('div')({\n  display: 'flex',\n  height: '100vh',\n  padding: '8px',\n})\n\nconst Sidebar = styled('div')(({ theme }) => ({\n  width: '331px',\n  height: '100%',\n  display: 'flex',\n  flexDirection: 'column',\n  [theme.breakpoints.down('sm')]: {\n    display: 'none',\n  },\n}))\n\nconst ContentBox = styled(Box)(({ theme }) => ({\n  borderRadius: '8px',\n  backgroundColor: theme.palette.background.paper,\n  color: theme.palette.text.primary,\n  width: '100%',\n  // height: '13vh',\n  padding: '20px',\n  marginBottom: '8px',\n  marginRight: '8px',\n}))\n\nconst NavList = styled('ul')({\n  listStyle: 'none',\n  padding: 0,\n  margin: 0,\n})\n\nconst StyledNavLink = styled(NavLink)(({ theme }) => ({\n  textDecoration: 'none',\n  display: 'flex',\n  alignItems: 'center',\n  gap: '20px',\n  color: theme.palette.text.secondary,\n\n  '&.active': {\n    color: theme.palette.text.primary,\n  },\n\n  '& svg': {\n    color: theme.palette.text.secondary,\n  },\n\n  '&.active svg': {\n    color: theme.palette.text.primary,\n  },\n}))\n\nconst AppLayout = () => {\n  return (\n    <div>\n      <Layout>\n        <Sidebar>\n          <ContentBox>\n            <NavList>\n              <StyledNavLink to=\"/\">\n                <HomeIcon />\n                <Typography variant=\"h2\" fontWeight={700}>\n                  Home\n                </Typography>\n              </StyledNavLink>\n              <StyledNavLink to=\"/search\">\n                <SearchIcon />\n                <Typography variant=\"h2\" fontWeight={700}>\n                  Search\n                </Typography>\n              </StyledNavLink>\n            </NavList>\n          </ContentBox>\n          <LibraryHead />\n          <Library />\n        </Sidebar>\n        <ContentBox>\n          <Navbar />\n          <Outlet />\n        </ContentBox>\n      </Layout>\n    </div>\n  )\n}\n\nexport default AppLayout\n","import {\n  CreatePlaylistRequest,\n  GetCurrentUserPlaylistRequest,\n  GetCurrentUserPlaylistResponse,\n  GetPlaylistItemsRequest,\n  GetPlaylistItemsResponse,\n  GetPlaylistRequest,\n  Playlist,\n} from '../models/playlist'\nimport api from '../utils/api'\n\nexport const getCurrentUserPlaylists = async ({\n  limit,\n  offset,\n}: GetCurrentUserPlaylistRequest): Promise<GetCurrentUserPlaylistResponse> => {\n  try {\n    const response = await api.get(`/me/playlists`, {\n      params: { limit, offset },\n    })\n    return response.data\n  } catch (error) {\n    throw new Error('fila to fetch current user playlists')\n  }\n}\n\nexport const getPlaylist = async (params: GetPlaylistRequest): Promise<Playlist> => {\n  try {\n    const response = await api.get(`/playlists/${params.playlist_id}`, {\n      params,\n    })\n    return response.data\n  } catch (error) {\n    throw new Error('fail to fetch playlist detail')\n  }\n}\n\nexport const getPlaylistItems = async (params: GetPlaylistItemsRequest): Promise<GetPlaylistItemsResponse> => {\n  try {\n    const response = await api.get(`/playlists/${params.playlist_id}/tracks`, {\n      params,\n    })\n    return response.data\n  } catch (error) {\n    throw new Error('fail to fetch playlist items')\n  }\n}\n\nexport const createPlaylist = async (user_id: string, params: CreatePlaylistRequest): Promise<Playlist> => {\n  try {\n    const { name, playlist_public, collaborative, description } = params\n    const response = await api.post(`/users/${user_id}/playlists`, {\n      name,\n      public: playlist_public,\n      collaborative,\n      description,\n    })\n    return response.data\n  } catch (error) {\n    throw new Error('fail to fetch create playlist')\n  }\n}\n"],"names":["api","axios","create","baseURL","SPOTIFY_BASE_URL","headers","Authorization","concat","localStorage","getItem","interceptors","request","use","getCurrentUserProfile","async","get","data","error","Error","useGetCurrentUserProfile","accessToken","useQuery","queryKey","queryFn","enabled","getSpotifyAuthUrl","codeVerifier","crypto","getRandomValues","Uint8Array","reduce","acc","x","possible","codeChallenge","input","TextEncoder","encode","plain","window","subtle","digest","sha256","btoa","String","fromCharCode","replace","clientId","CLIENT_ID","redirectUri","REDIRECT_URI","scope","SCOPES","authUrl","URL","setItem","params","response_type","client_id","code_challenge_method","code_challenge","redirect_uri","search","URLSearchParams","Object","entries","toString","location","href","EmptyPlaylist","Layout","styled","_ref","theme","heigth","AddPlaylist","_ref2","width","height","backgroundColor","palette","background","paper","borderRadius","padding","margin","marginTop","CreatePlaylistBtn","Button","_ref3","text","primary","color","default","textAlign","_jsx","children","_jsxs","Typography","variant","fontWeight","AddLibrary","display","justifyContent","LibraryHead","mutate","createPlaylist","useCreatePlaylist","user","queryClient","useQueryClient","useMutation","mutationFn","id","Promise","reject","onSuccess","invalidateQueries","console","log","token","open","setOpen","useState","handleClose","BookmarkIcon","onClick","handleCreateAndLogin","name","AddRoundedIcon","sx","Dialog","onClose","DialogTitle","DialogActions","autoFocus","PlaylistContainer","overflowY","maxHeight","msOverflowStyle","scrollbarWidth","breakpoints","down","HoverPlaylistItem","ImageListItem","action","hover","Library","isLoggedIn","setIsLoggedIn","Boolean","navigate","useNavigate","fetchNextPage","hasNextPage","isFetchingNextPage","limit","offset","arguments","length","undefined","useInfiniteQuery","pageParam","getCurrentUserPlaylists","initialPageParam","getNextPageParam","lastPage","next","nextOffset","searchParams","parseInt","useGetCurrentUserPlaylists","ref","inView","useInView","useEffect","syncLogin","addEventListener","removeEventListener","ImageList","cols","gap","pages","map","page","pageIndex","items","playlist","i","imageUrl","Array","isArray","images","url","handleClick","src","alt","loading","style","mt","owner","display_name","LoginBtn","size","login","HoverContainer","Box","position","LogoutBox","top","right","boxShadow","shadows","spacing","shape","zIndex","Navbar","_userProfile$images","imgError","setImgError","showLogout","setShowLogout","userProfile","logoutQueryClient","alignItems","Avatar","onError","cursor","handleAvatarClick","prev","handleClickOpen","handleLogoutConfirm","removeItem","clear","reload","Sidebar","flexDirection","ContentBox","marginBottom","marginRight","NavList","listStyle","StyledNavLink","NavLink","textDecoration","secondary","AppLayout","to","HomeIcon","SearchIcon","Outlet","getPlaylist","playlist_id","getPlaylistItems","user_id","playlist_public","collaborative","description","post","public"],"sourceRoot":""}